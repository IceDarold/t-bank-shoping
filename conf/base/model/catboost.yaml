# ==============================================================================
# Полный файл конфигурации для CatBoost
# ==============================================================================
# Этот файл содержит большинство доступных параметров для CatBoost.
# Для получения самой последней и полной информации, обратитесь к официальной
# документации: https://catboost.ai/en/docs/references/training-parameters/

# --- Указатель на Python-класс в нашем фреймворке ---
_target_: src.models.catboost.CatBoostModel

# --- Словарь с параметрами, передаваемый в конструктор класса ---
params:
  # ============================================================================
  # 1. Основные параметры задачи
  # ============================================================================
  
  # `iterations`: количество деревьев (аналог n_estimators).
  iterations: 2000

  # `learning_rate`: коэффициент обучения. Уменьшается автоматически, если включен `use_best_model`.
  learning_rate: 0.05
  
  # `loss_function`: функция потерь. CatBoost сам определит тип задачи (регрессия/классификация).
  # - Классификация: 'Logloss' (для бинарной), 'MultiClass' (для многоклассовой).
  # - Регрессия: 'RMSE', 'MAE', 'Quantile', 'MAPE', 'RMSLE'.
  loss_function: 'Logloss'
  
  # `eval_metric`: метрика для оценки на валидации и для early stopping.
  # Можно использовать ту же, что и `loss_function`, или другую.
  # - Классификация: 'AUC', 'F1', 'Accuracy', 'Precision', 'Recall'.
  # - Регрессия: 'RMSE', 'MAE', и т.д.
  eval_metric: 'AUC'
  
  # `random_seed`: сид для воспроизводимости (аналог `seed`).
  random_seed: ${globals.seed}

  # `use_best_model`: если True (рекомендуется), CatBoost будет использовать
  # модель с лучшей итерации на валидационном сете. Требует `eval_set`.
  # По умолчанию True, если есть `eval_set`.
  use_best_model: true

  # ============================================================================
  # 2. Параметры производительности и железа
  # ============================================================================

  # `task_type`: тип устройства для обучения.
  # 'CPU' или 'GPU'. Наш код автоматически выставит 'GPU', если он доступен.
  # task_type: 'CPU'

  # `thread_count`: количество потоков для CPU. -1 использует все.
  thread_count: -1
  
  # `devices`: для GPU, можно указать ID устройств, например '0:1'.
  # devices: '0'

  # `verbose`: частота вывода логов. Наш код по умолчанию ставит `False`.
  # Можно переопределить на `100` для вывода каждые 100 итераций.
  verbose: 100

  # ============================================================================
  # 3. Параметры структуры дерева и контроля переобучения
  # ============================================================================

  # `depth`: максимальная глубина дерева. Ключевой параметр. Типично: 4-10.
  depth: 6
  
  # `l2_leaf_reg`: коэффициент L2 регуляризации на значения в листьях (аналог `reg_lambda`).
  l2_leaf_reg: 3.0
  
  # `min_data_in_leaf`: минимальное количество объектов в листе.
  min_data_in_leaf: 1
  
  # `max_leaves`: максимальное количество листьев. По умолчанию 31.
  # max_leaves: 31

  # `subsample`: доля объектов для обучения каждого дерева (аналог `subsample` в XGBoost).
  # Требуется, если `bootstrap_type` = 'Bernoulli' или 'Poisson'.
  # subsample: 0.8
  
  # `bootstrap_type`: метод семплирования данных для каждого дерева.
  # - 'Bayesian': метод по умолчанию.
  # - 'Bernoulli': классический subsample.
  # - 'MVS': Minimum Variance Sampling.
  # - 'Poisson': subsample с весами.
  bootstrap_type: 'Bayesian'
  
  # `bagging_temperature`: параметр для Bayesian bootstrapping. 1.0 - агрессивный, 0.0 - нет.
  bagging_temperature: 1.0

  # `random_strength`: добавляет случайный "шум" к разделениям для борьбы с переобучением.
  random_strength: 1.0
  
  # ============================================================================
  # 4. ❗️ Ключевые параметры CatBoost: обработка признаков
  # ============================================================================

  # --- Обработка категориальных признаков ---
  # `cat_features`: список имен или индексов. Наш код передает это автоматически.
  
  # `one_hot_max_size`: категории с количеством уникальных значений <= этого числа
  # будут закодированы через One-Hot Encoding.
  one_hot_max_size: 2
  
  # `max_ctr_complexity`: максимальное количество признаков для комбинаций при
  # вычислении CTR (Target Encoding). По умолчанию 4.
  # max_ctr_complexity: 4

  # `ctr_leaf_count_limit`: минимальное количество объектов, для которых CTR
  # не будет учитываться при выборе структуры дерева.
  # ctr_leaf_count_limit: 50

  # `simple_ctr`, `combinations_ctr`: настройки для Target Encoding.
  # Например, можно задать тип биннинга, силу сглаживания и т.д.
  # Это очень продвинутые параметры.
  
  # --- Обработка текстовых признаков (встроенная) ---
  # `text_features`: список имен колонок с текстом.
  # `tokenizers`: конфигурация токенизаторов.
  # `dictionaries`: конфигурация словарей.
  # CatBoost имеет мощную встроенную обработку текста, которую можно настроить здесь.

  # --- Обработка пропущенных значений ---
  # `nan_mode`: как обрабатывать NaN.
  # - 'Min': заменить на минимальное значение в колонке.
  # - 'Max': заменить на максимальное.
  # - 'Forbidden': выдавать ошибку (по умолчанию).
  # CatBoost хорошо работает с NaN, поэтому часто этот параметр не трогают.
  
  # ============================================================================
  # 5. Параметры для конкретных задач
  # ============================================================================
  
  # `class_weights`: веса для классов в задачах несбалансированной классификации.
  # class_weights: [0.3, 0.7]

  # `scale_pos_weight`: аналог `scale_pos_weight` в XGBoost для бинарной классификации.
  # scale_pos_weight: 1.0